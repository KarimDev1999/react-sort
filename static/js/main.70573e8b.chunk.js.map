{"version":3,"sources":["components/Header.jsx","components/WorkerList.jsx","components/MyLoader.jsx","components/Info.jsx","components/Pagination.jsx","App.js","redux/actions/workers.js","redux/reducers/workers.js","redux/reducers/rootReducers.js","redux/store.js","index.js"],"names":["Header","className","to","WorkerList","currentWorkers","onSort","onRowSelect","rowData","loading","MyLoader","workers","Pagination","workersPerPage","handlePageChange","currentPage","id","firstName","lastName","description","onClick","e","map","worker","key","phone","email","role","Info","class","pageNumbers","useState","pagesToShow","pageNumberPortion","setPageNumberPortion","lastNumber","firstNumber","i","Math","ceil","length","push","newArr","slice","console","log","number","App","useSelector","items","sort","row","setCurrentPage","dispatch","useDispatch","indexOfLastWorker","indexOfFirstWorker","useEffect","type","payload","axios","get","then","data","setWorkers","field","clonedData","concat","sortType","setSortedData","_","orderBy","exact","path","render","initialState","state","action","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.70573e8b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <div>\r\n                    <Link to='/' className=\"navbar-brand\">Worker List</Link>\r\n                    <Link to='/info' className=\"navbar-brand\">Info</Link>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction WorkerList({ currentWorkers, onSort, onRowSelect, rowData, loading, MyLoader, workers, Pagination, workersPerPage, handlePageChange, currentPage }) {\r\n\r\n\r\n\r\n    return (\r\n        <div className='workers'>\r\n\r\n\r\n            {rowData &&\r\n\r\n                <div className='workers__info'>\r\n                    <h1 className='title'>Информация о работнике</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <span className='bold'>ID:</span>  {rowData.id}\r\n                        </li>\r\n                        <li>\r\n                            <span className='bold'> Firstname: </span> {rowData.firstName}\r\n                        </li>\r\n                        <li>\r\n                            <span className='bold'> Lastname: </span>  {rowData.lastName}\r\n                        </li>\r\n                        <li>\r\n                            <span className='bold'> description: </span>  {rowData.description}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            }\r\n\r\n            <table className=\"table table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={(e) => onSort('id')}>ID</th>\r\n                        <th onClick={(e) => onSort('firstName')}>firstName</th>\r\n                        <th onClick={(e) => onSort('lastName')}>lastName</th>\r\n                        <th onClick={(e) => onSort('email')}>email</th>\r\n                        <th onClick={(e) => onSort('phone')}>phone</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {!loading ?\r\n                        currentWorkers.map(worker => <tr key={worker.id + worker.phone} onClick={() => onRowSelect(worker)}>\r\n                            <td>{worker.id}</td>\r\n                            <td>{worker.firstName}</td>\r\n                            <td>{worker.lastName}</td>\r\n                            <td>{worker.email}</td>\r\n                            <td>{worker.phone}</td>\r\n                        </tr>)\r\n                        : <tr>\r\n                            <MyLoader />\r\n                        </tr>\r\n                    }\r\n\r\n                </tbody>\r\n            </table>\r\n\r\n            <Pagination handlePageChange={handlePageChange} workers={workers} workersPerPage={workersPerPage} currentPage={currentPage} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkerList\r\n","import React from \"react\"\r\n\r\nconst MyLoader = () => (\r\n    <td>\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </td>\r\n)\r\n\r\nexport default MyLoader","import React from 'react'\r\n\r\nfunction Info() {\r\n    return (\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Worker List</h1>\r\n                <p class=\"lead\">Version 1.0</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","import React, { useState } from 'react'\r\n\r\nfunction Pagination({ workers, workersPerPage, handlePageChange, currentPage }) {\r\n    const pageNumbers = [];\r\n    const [pagesToShow] = useState(10);\r\n    const [pageNumberPortion, setPageNumberPortion] = useState(1);\r\n\r\n    let lastNumber = (pagesToShow * pageNumberPortion) + 1;\r\n    let firstNumber = (lastNumber - pagesToShow);\r\n\r\n    for (let i = 0; i <= Math.ceil(workers.length / workersPerPage); i++) {\r\n        pageNumbers.push(i)\r\n    };\r\n\r\n\r\n\r\n    let newArr = pageNumbers.slice(firstNumber, lastNumber);\r\n\r\n\r\n    console.log(firstNumber, lastNumber)\r\n\r\n    const onNext = () => {\r\n        if (lastNumber !== pageNumbers.length) {\r\n            const nextPortion = pageNumberPortion + 1;\r\n            setPageNumberPortion(nextPortion);\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    const onPrev = () => {\r\n        if (pageNumberPortion === 1) {\r\n            return;\r\n        }\r\n        else {\r\n            setPageNumberPortion(pageNumberPortion - 1)\r\n            console.log(firstNumber);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className='pagination'>\r\n            <button className='btn btn-outline-secondary' onClick={onPrev} >prev</button>\r\n            <ul>\r\n                {newArr.map(number => <li key={number}><a onClick={() => handlePageChange(number)}>{number}</a></li>)}\r\n            </ul>\r\n            <button className='btn btn-outline-secondary' onClick={onNext}>next</button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Header, WorkerList, MyLoader, Info, Pagination } from './components';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { setSort, setSortedData, setRowData, fetchWorkers } from './redux/actions/workers';\nimport './App.css';\nimport _ from 'lodash'\n\n\n\nfunction App() {\n\n  const workers = useSelector(({ workers }) => workers.items);\n  const sort = useSelector(({ workers }) => workers.sort);\n  const rowData = useSelector(({ workers }) => workers.row);\n  const loading = useSelector(({ workers }) => workers.loading);\n  const [workersPerPage] = useState(20)\n  const [currentPage, setCurrentPage] = useState(1);\n  const dispatch = useDispatch();\n\n  const indexOfLastWorker = workersPerPage * currentPage;\n  const indexOfFirstWorker = indexOfLastWorker - workersPerPage;\n  const currentWorkers = workers.slice(indexOfFirstWorker, indexOfLastWorker);\n\n\n\n  const handlePageChange = (number) => {\n    setCurrentPage(number);\n\n  }\n\n  useEffect(() => {\n    dispatch(fetchWorkers())\n  }, []);\n  const onSort = (field) => {\n    const clonedData = workers.concat();\n    const sortType = sort === 'asc' ? 'desc' : 'asc'\n    dispatch(setSort(sortType));\n    dispatch(setSortedData(_.orderBy(clonedData, field, sortType)));\n\n  }\n\n  const onRowSelect = (worker) => {\n    dispatch(setRowData(worker));\n  }\n\n\n  return (\n    <BrowserRouter>\n      <Header />\n      <div className='container'>\n\n        <Route exact path='/' render={() => <WorkerList currentPage={currentPage} handlePageChange={handlePageChange} workersPerPage={workersPerPage} Pagination={Pagination} workers={workers} currentWorkers={currentWorkers} onSort={onSort} sort={sort} onRowSelect={onRowSelect} rowData={rowData} loading={loading} MyLoader={MyLoader} />} />\n        <Route path='/info' render={() => <Info />} />\n      </div>\n    </BrowserRouter>\n  );\n\n}\n\nexport default App;\n","import axios from 'axios';\r\n\r\nexport const setWorkers = payload => ({\r\n    type: 'SET_WORKERS',\r\n    payload\r\n});\r\n\r\nexport const setSort = payload => ({\r\n    type: 'SET_SORT',\r\n    payload,\r\n})\r\n\r\nexport const setRowData = payload => ({\r\n    type: 'SET_ROW_DATA',\r\n    payload,\r\n})\r\n\r\nexport const setSortedData = payload => ({\r\n    type: 'SET_SORTED_DATA',\r\n    payload\r\n})\r\n\r\nexport const setLoading = payload => ({\r\n    type: 'SET_LOADING',\r\n    payload\r\n})\r\n\r\nexport const fetchWorkers = () => dispatch => {\r\n    dispatch(setLoading(true));\r\n    axios.get(`http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`).then(({ data }) => {\r\n        dispatch(setWorkers(data))\r\n    })\r\n}","const initialState = {\r\n    items: [],\r\n    loading: false,\r\n    sort: '',\r\n    row: null,\r\n\r\n}\r\n\r\n\r\nconst workers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_WORKERS':\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case 'SET_SORT':\r\n            return {\r\n                ...state,\r\n                sort: action.payload\r\n            }\r\n        case 'SET_SORTED_DATA':\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case 'SET_ROW_DATA':\r\n            return {\r\n                ...state,\r\n                row: action.payload\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n\r\n        default: return state;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default workers;","import { combineReducers } from 'redux';\r\nimport workers from './workers';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    workers,\r\n})\r\n\r\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}